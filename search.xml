<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>string类</title>
      <link href="/2023/03/21/stl%E5%AD%A6%E4%B9%A0_part1/"/>
      <url>/2023/03/21/stl%E5%AD%A6%E4%B9%A0_part1/</url>
      
        <content type="html"><![CDATA[<h1 id="stl学习-part1"><a href="#stl学习-part1" class="headerlink" title="stl学习_part1"></a>stl学习_part1</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//string四个构造函数</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1(&quot;hello world!&quot;);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">//string(const char*s);使用字符串s初始化</span><br><span class="line">string str2(6, &#x27;h&#x27;);</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    //string(int n,char c);使用n个字符c初始化</span><br><span class="line">string str3(str2);</span><br><span class="line">cout &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">//string(const string &amp;str);使用一个string对象初始化</span><br><span class="line">string str4;</span><br><span class="line">cout &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">//string()创建一个空的字符串</span><br><span class="line">cout &lt;&lt; &quot;上面这行是一个空的string&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//基本赋值操作</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">string str1(&quot;Hello World!&quot;);</span><br><span class="line">//&#x27;=&#x27;运算符重载</span><br><span class="line">string str2 = str1;</span><br><span class="line">//string&amp; operator=(const string&amp; str);</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2 = &#x27;h&#x27;;</span><br><span class="line">//string&amp; operator=(char c)</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2 = &quot;hhhh&quot;;</span><br><span class="line">//string&amp; operator=(const char*s)</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//赋值成员函数</span><br><span class="line">void test03()</span><br><span class="line">&#123;</span><br><span class="line">string str1 = &quot;Hello World!&quot;;</span><br><span class="line">string str2;</span><br><span class="line">str2.assign(str1);</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">//string&amp; assign(const string&amp; s)</span><br><span class="line">str2.assign(&quot;nihao!&quot;);</span><br><span class="line">//string&amp; assign(const char *s)</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2.assign(&quot;hello world!&quot;, 5);</span><br><span class="line">//string&amp; assign(const char *s,n):把字符串s的前n个字符赋值给string</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2.assign(6, &#x27;h&#x27;);</span><br><span class="line">//string&amp; assign(int n,char c)把n个字符c赋值给字符串</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2.assign(str1, 6, 5);</span><br><span class="line">//string&amp; assgin(const string &amp;s,int start,int n)将s从start开始的n个字符复制给string</span><br><span class="line">//注意：start的索引从0开始</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//string查找和替换</span><br><span class="line">void test_find() &#123;</span><br><span class="line">string s = &quot;Hello World!&quot;;</span><br><span class="line">int position = 0;</span><br><span class="line">position = s.find(&quot;Wo&quot;, 0);//正着找，0是开始搜索的起始位置</span><br><span class="line">cout &lt;&lt; position &lt;&lt; endl;</span><br><span class="line">position = s.rfind(&quot;Wo&quot;, 11);//倒着找</span><br><span class="line">cout &lt;&lt; position &lt;&lt; endl;</span><br><span class="line">//还有个replace，比较简单，不赘述</span><br><span class="line">&#125;</span><br><span class="line">//string的比较操作,compare也可以用，但是推荐用关系运算符&lt;&gt;=，更简洁</span><br><span class="line">void test_compare() &#123;</span><br><span class="line">string str1 = &quot;abc&quot;;</span><br><span class="line">string str2 = &quot;bcd&quot;;</span><br><span class="line">if (str1.compare(str2) == 1) &#123;</span><br><span class="line">cout &lt;&lt; &quot;str1大于str2&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;str2大于str1&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//string子串:</span><br><span class="line">//string substr(int pos=0,int n=npos)const;返回由pos开始的n个字符组成的字符串</span><br><span class="line">//----------------</span><br><span class="line"></span><br><span class="line">//string的插入和删除操作</span><br><span class="line">//insert、erase</span><br><span class="line"></span><br><span class="line">//string和c-style字符串转换</span><br><span class="line">void test_transfer() &#123;</span><br><span class="line">//char*转成string(默认支持）</span><br><span class="line">string str1;</span><br><span class="line">str1 = (string)&quot;hello&quot;;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//string转成char*需要成员函数c_str</span><br><span class="line">string str2 = &quot;hello&quot;;</span><br><span class="line">char* s = (char*)str2.c_str();</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">test03();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试blog</title>
      <link href="/2023/03/10/%E6%B5%8B%E8%AF%95blog/"/>
      <url>/2023/03/10/%E6%B5%8B%E8%AF%95blog/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法简介"><a href="#markdown语法简介" class="headerlink" title="markdown语法简介"></a>markdown语法简介</h1><h2 id="标题说明"><a href="#标题说明" class="headerlink" title="标题说明"></a>标题说明</h2><p>文字前加＃号和空格,即可实现多级标题，＃越少，标题级越高，此处为两个＃号,其他例子如下</p><h3 id="三级标题（”三个“）"><a href="#三级标题（”三个“）" class="headerlink" title="三级标题（”三个“）"></a>三级标题（”三个“）</h3><h4 id="四级标题（”四个“）"><a href="#四级标题（”四个“）" class="headerlink" title="四级标题（”四个“）"></a>四级标题（”四个“）</h4><h2 id="换行说明"><a href="#换行说明" class="headerlink" title="换行说明"></a>换行说明</h2><p>方法一：空一行即可实现换行</p><p>方法二：使用两个以上的换行加回车</p><h2 id="字体说明"><a href="#字体说明" class="headerlink" title="字体说明"></a>字体说明</h2><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p><em>斜体文本</em> ： ’* +文字+ *‘</p><p><em>斜体文本</em> ： ’_ +文字+ _‘</p><p><strong>粗体文本</strong>:  ’** +文字+ **‘</p><p><strong>粗体文本</strong>: ’__ +文字+ __‘</p><p><em><strong>粗斜体文本</strong></em>:  ’*** +文字+ ***‘</p><p><em><strong>粗斜体文本</strong></em>:  ’___ +文字+ ___‘</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>在文字的两端分别加上两个波浪线<del>即可： ~~我是你爹</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>使用HTML的标签’&lt;’u’&gt;’（把单引号去掉，因为我一输入那个就生成下划线了）</p><h3 id="脚注格式"><a href="#脚注格式" class="headerlink" title="脚注格式"></a>脚注格式</h3><p>[^文本]</p><p>例如这样<a href="%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%EF%BC%9B">^runoob</a></p><h3 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p><p>有序列表使用数字并加上 . 号来表示</p><p>列表嵌套：列表嵌套只需在子列表中的选项前面添加两个或四个空格即可</p>]]></content>
      
      
      <categories>
          
          <category> 分类-1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签-1 </tag>
            
            <tag> 标签-2 </tag>
            
            <tag> 标签-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试blog</title>
      <link href="/2023/03/10/poj1995/"/>
      <url>/2023/03/10/poj1995/</url>
      
        <content type="html"><![CDATA[<h1 id="poj1995题解"><a href="#poj1995题解" class="headerlink" title="poj1995题解"></a>poj1995题解</h1><h2 id="一、题目介绍"><a href="#一、题目介绍" class="headerlink" title="一、题目介绍"></a>一、题目介绍</h2><p>求a的b次方对p取模的值，其中1&lt;&#x3D;a,b,p&lt;&#x3D;10^9</p><h2 id="二、核心代码"><a href="#二、核心代码" class="headerlink" title="二、核心代码"></a>二、核心代码</h2><p>、、、<br>int power(int a, int b, int p) {<br>   int ans &#x3D; 1 % p;<br>   for (; b; b &gt;&gt;&#x3D; 1)<br>   {<br>     if (b &amp; 1)ans &#x3D; (long long)ans * a % p;<br>     a &#x3D; (long long)a * a % p;<br>   }<br>   return ans;<br>}<br>、、、</p><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><p>、、、<br>#include<iostream><br>using namespace std;<br>int power(int a, int b, int p) {<br>int ans &#x3D; 1 % p;<br>for (; b; b &gt;&gt;&#x3D; 1)<br>{<br>if (b &amp; 1)ans &#x3D; (long long)ans * a % p;<br>a &#x3D; (long long)a * a % p;<br>}<br>return ans;<br>}</p><p>int main() {<br>int num_of_question;<br>int num;<br>int ans;<br>int a, b, p;<br>scanf_s(“%d”, &amp;num_of_question);<br>for (int i &#x3D; 0; i &lt; num_of_question; i++)<br>{<br>ans &#x3D; 0;<br>scanf_s(“%d %d”, &amp;p,&amp;num);<br>for (int j &#x3D; 0; j &lt; num; j++)<br>{<br>scanf_s(“%d %d”, &amp;a, &amp;b);<br>ans +&#x3D; power(a, b, p);<br>ans %&#x3D; p;<br>}<br>printf(“%d\n”, ans);<br>}<br>return 0;<br>}<br>、、、</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poj </tag>
            
            <tag> 移位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/06/hello-world/"/>
      <url>/2023/03/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
